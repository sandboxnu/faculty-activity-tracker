generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  firstName      String
  lastName       String
  preferredName  String?
  role           Role           @default(FACULTY)
  dateModified   BigInt         @default(dbgenerated("extract(epoch from now())::bigint"))
  professorInfo  ProfessorInfo?
  professorScore ProfessorScore?
  activities     Activity[]
  narratives     Narrative[]
}

model ProfessorInfo {
  id                         Int              @id @default(autoincrement())
  user                       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     Int              @unique
  position                   String
  teachingPercent            Float
  researchPercent            Float
  servicePercent             Float
  sabbatical                 SabbaticalOption
  teachingReleaseExplanation String?
}

model ProfessorScore {
  id                         Int              @id @default(autoincrement())
  user                       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     Int              @unique
  comment                    String
  teachingScore              Float
  researchScore              Float
  serviceScore               Float
  totalScore                 Float
}

model Activity {
  id                       Int               @id @default(autoincrement())
  user                     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   Int
  year                     Int
  semester                 Semester[]
  dateModified             BigInt            @default(dbgenerated("extract(epoch from now())::bigint"))
  name                     String
  description              String
  semesterOtherDescription String?
  category                 ActivityCategory
  significance             SignificanceLevel
  isFavorite               Boolean
  meritStatus              ActivityMeritStatus?
}

model Narrative {
  id           Int               @id @default(autoincrement())
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  year         Int
  dateModified BigInt
  category     NarrativeCategory
  text         String
}

model RoleAccessCode {
  id          Int             @id @default(autoincrement())
  role        Role            @unique
  accessCode  String
}

enum Role {
  FACULTY
  MERIT_COMMITTEE_MEMBER
  MERIT_COMMITTEE_HEAD
  DEAN
}

enum SabbaticalOption {
  NO
  SEMESTER
  YEAR
}

enum NarrativeCategory {
  SUMMARY
  SERVICE
  RESEARCH
  TEACHING
}

enum ActivityCategory {
  SERVICE
  RESEARCH
  TEACHING
}

enum SignificanceLevel {
  MAJOR
  SIGNIFICANT
  MINOR
}

enum Semester {
  FALL
  SPRING
  SUMMER
  OTHER
}

enum ActivityMeritStatus {
  ACCEPTED
  REJECTED
}
